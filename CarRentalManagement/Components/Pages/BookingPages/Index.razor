@page "/bookings"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using CarRentalManagement.Domain
@using CarRentalManagement.Data
@implements IAsyncDisposable
@inject IDbContextFactory<CarRentalManagement.Data.CarRentalManagementContext> DbFactory

@* Practice 99: Assign role-based authorization to BookingPages *@
@attribute [Authorize(Roles = "Administrator, User")]
@* Practice 99: End *@

@* Practice 109: enable InteractiveServer mode *@
@rendermode InteractiveServer 


<PageTitle>Index</PageTitle>

<h1>Index</h1>

<p>
    <a href="bookings/create">Create New</a>
</p>

@* <QuickGrid Class="table" Items="context.Booking"> *@    @* Practice 108 *@
<QuickGrid Class="table" Items=" FilteredBookings" Pagination="paginationState">    @* Practice 108 110 *@

    @* <PropertyColumn Property="booking => booking.Id" Sortable="true"  />  *@ @* Temp for Test only *@

    @* <PropertyColumn Property="booking => booking.DateOut" /> *@   @* Practice 109 *@
    <PropertyColumn Property="booking => booking.DateOut" Sortable="true" Format=“dd/MM/yyyy” />  @*  Practice 109 Add Sortable="true", Format attribute  *@
    <PropertyColumn Property="booking => booking.DateIn" Sortable="true" Format=“dd/MM/yyyy” />   @*  Practice 109 Add Sortable="true", Format attribute *@
@* 
    <PropertyColumn Property="booking => booking.VehicleId" Sortable="true" />
    <PropertyColumn Property="booking => booking.CustomerId" Sortable="true" />  *@

    @* Pratice 109 start *@

    <TemplateColumn Context="booking" Title="Vehicle">
        @GetVehicleString(booking.VehicleId)
    </TemplateColumn>
    <TemplateColumn Context="booking" Title="Customer">
        @GetCustomerString(booking.CustomerId)
    </TemplateColumn>

    @* <PropertyColumn Property="booking => booking.VehicleId" Sortable="true" /> 
    <PropertyColumn Property="booking => booking.CustomerId" Sortable="true" /> *@ 
    @* Pratice 109 end *@


    @* <PropertyColumn Property="booking => booking.DateCreated" /> *@  @* Practice 109: Commnet away, since customers not interested *@
    @* <PropertyColumn Property="booking => booking.DateUpdated" /> *@  @* Practice 109: Commnet away, since customers not interested *@
    @* <PropertyColumn Property="booking => booking.CreatedBy" /> *@    @* Practice 109: Commnet away, since customers not interested *@
    @* <PropertyColumn Property="booking => booking.UpdatedBy" /> *@    @* Practice 109: Commnet away, since customers not interested *@
 

    <TemplateColumn Context="booking">
        <a href="@($"bookings/edit?id={booking.Id}")">Edit</a> |
        <a href="@($"bookings/details?id={booking.Id}")">Details</a> |
        @* Practice 100 Add in AuthorizeView tag *@
        @* <a href="@($"bookings/delete?id={booking.Id}")">Delete</a> *@
        <AuthorizeView Roles="Administrator">
            | <a href="@($"bookings/delete?id={booking.Id}")">Delete</a>
        </AuthorizeView>
        @* Practice 100: End *@
        @* <a href="@($"bookings/delete?id={booking.Id}")">Delete</a> *@

    </TemplateColumn>
</QuickGrid>

<Paginator State="paginationState" />  @* Practice 110 *@

@code {
    PaginationState paginationState = new PaginationState { ItemsPerPage = 1 };
    private string nameFilter = "";

    private IQueryable<Booking> FilteredBookings => isAdmin
            ? context.Booking // Admins can see all bookings
            : context.Booking.Where(e => e.CreatedBy == userId); // Regular users see only their own bookings

    private CarRentalManagementContext context = default!;
    private string userId = string.Empty;
    private bool isAdmin = false;

    //Declare and initialize IList and Dictionaries
    //private IQueryable<Vehicle> Vehicles;
    //private IQueryable<Customer> Customers;
    private IList<Vehicle> Vehicles;
    private IList<Customer> Customers;
    private Dictionary<int, Make> MakesDict = new Dictionary<int, Make>();
    private Dictionary<int, Model> ModelsDict = new Dictionary<int, Model>();
    private Dictionary<int, Colour> ColoursDict = new Dictionary<int, Colour>();

    @inject AuthenticationStateProvider authenticationStateProvider

    // GetVehicleString method to get the vehicle string
    private string GetVehicleString(int vehicleId)
    {
        var vehicle = Vehicles.FirstOrDefault(v => v.Id == vehicleId);
        return vehicle == null ? string.Empty : $"{MakesDict[vehicle.MakeId].Name} {ModelsDict[vehicle.ModelId].Name} {ColoursDict[vehicle.ColourId].Name}";
    }

    // GetCustomerString method to get the customer string
    private string GetCustomerString(int customerId)
    {
        var customer = Customers.FirstOrDefault(c => c.Id == customerId);
        return customer == null ? string.Empty : $"{customer.DrivingLicense} - Contact:{customer.ContactNumber}";
    }

    protected override async Task OnInitializedAsync()
    {
        // Fetch the authentication state
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        // Extract user information
        userId = user.FindFirst("userId")?.Value ?? string.Empty;
        isAdmin = user.IsInRole("Administrator");

        // Initialize the DbContext
        context = DbFactory.CreateDbContext();

        //Load data from the database
        Vehicles = context.Vehicle.ToList();
        //Vehicles = context.Vehicle;

        //Get all the customers created by the user or all customers if the user is an administrator
        Customers = context.Customer.Where(c => c.CreatedBy == userId).ToList();
        //Customers = context.Customer.Where(c => c.CreatedBy == userId);
        if (isAdmin)
        {
            Customers = context.Customer.ToList();
            //Customers = context.Customer;
        }

        MakesDict = context.Make.ToDictionary(o => o.Id, o => o);
        ModelsDict = context.Model.ToDictionary(o => o.Id, o => o);
        ColoursDict = context.Colour.ToDictionary(o => o.Id, o => o);
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}

@* 
@code {

    PaginationState paginationState = new PaginationState { ItemsPerPage = 2 }; /* Practice 110 */


    // Practice 109: code start
    //Declare and initialize IList and Dictionaries
    private IList<Vehicle> Vehicles;
    private IList<Customer> Customers;
    private Dictionary<int, Make> MakesDict = new Dictionary<int, Make>();
    private Dictionary<int, Model> ModelsDict = new Dictionary<int, Model>();
    private Dictionary<int, Colour> ColoursDict = new Dictionary<int, Colour>();

    // GetVehicleString method to get the vehicle string
    private string GetVehicleString(int vehicleId)
    {
        var vehicle = Vehicles.FirstOrDefault(v => v.Id == vehicleId);
        return vehicle == null ? string.Empty : $"{MakesDict[vehicle.MakeId].Name} {ModelsDict[vehicle.ModelId].Name} {ColoursDict[vehicle.ColourId].Name}";
    }

    // GetCustomerString method to get the customer string
    private string GetCustomerString(int customerId)
    {
        var customer = Customers.FirstOrDefault(c => c.Id == customerId);
        return customer == null ?
        string.Empty : $"{customer.DrivingLicense} - Contact:{customer.ContactNumber}";
    }

    // Practice 109: code end



    // Practice 108: comment away start
    
    // private CarRentalManagementContext context = default!;

    // protected override void OnInitialized()
    // {
    //     context = DbFactory.CreateDbContext();
    // }

    // public async ValueTask DisposeAsync() => await context.DisposeAsync();

    // Practice 108: comment away End

    // Practice 108: Updated code start
    private CarRentalManagementContext context = default!;
    private string userId = string.Empty;
    private bool isAdmin = false;

    @inject AuthenticationStateProvider authenticationStateProvider

    private IQueryable<Booking> FilteredBookings => isAdmin
        ? context.Booking // Admins can see all bookings
        : context.Booking.Where(e => e.CreatedBy == userId); // Regular users see only their own bookings

    protected override async Task OnInitializedAsync()
    {
        // Fetch the authentication state
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        // Extract user information
        userId = user.FindFirst("userId")?.Value ?? string.Empty;
        isAdmin = user.IsInRole("Administrator");

        // Initialize the DbContext
        context = DbFactory.CreateDbContext();
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();

    // Practice 108: Updated code end





}
 *@