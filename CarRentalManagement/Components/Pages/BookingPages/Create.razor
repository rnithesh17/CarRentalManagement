@page "/bookings/create"
@using Microsoft.EntityFrameworkCore
@using CarRentalManagement.Domain
@inject IDbContextFactory<CarRentalManagement.Data.CarRentalManagementContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Booking</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Booking" OnValidSubmit="AddBooking" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="dateout" class="form-label">DateOut:</label> 
                <InputDate id="dateout" @bind-Value="Booking.DateOut" class="form-control" /> 
                <ValidationMessage For="() => Booking.DateOut" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="datein" class="form-label">DateIn:</label> 
                <InputDate id="datein" @bind-Value="Booking.DateIn" class="form-control" /> 
                <ValidationMessage For="() => Booking.DateIn" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="vehicleid" class="form-label">VehicleId:</label> 

                <label for="vehicleid" class="form-label">Vehicle:</label>
                <InputSelect id="vehicleId" @bind-Value="Booking.VehicleId" class="form-control">
                    <option value="">-- Select Vehicle --</option>
                    @if (Vehicles != null)
                    {
                        foreach (var vehicle in Vehicles)
                        {
                            <option value="@vehicle.Id">
                                @MakesDict[vehicle.MakeId].Name -
                                @ModelsDict[vehicle.ModelId].Name - @ColoursDict[vehicle.ColourId].Name
                            </option>
                        }
                    }
                </InputSelect>
                <InputNumber id="vehicleid" @bind-Value="Booking.VehicleId" class="form-control" /> 
                <ValidationMessage For="() => Booking.VehicleId" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="customerid" class="form-label">CustomerId:</label>

               
                <InputSelect id="customerid" @bind-Value="Booking.CustomerId" class="form-control">
                    <option value="">-- Select Customer --</option>
                    @if (Customers != null)
                    {
                        foreach (var customer in Customers)
                        {
                            <option value="@customer.Id">@customer.DrivingLicense</option>
                        }
                    }
                
                </InputSelect>
 
                <ValidationMessage For="() => Booking.CustomerId" class="text-danger" /> 
            </div>        
            <div class="mb-3" hidden>
                <label for="datecreated" class="form-label">DateCreated:</label> 
                <InputDate id="datecreated" @bind-Value="Booking.DateCreated" class="form-control" /> 
                <ValidationMessage For="() => Booking.DateCreated" class="text-danger" /> 
            </div>        
            <div class="mb-3" hidden>
                <label for="dateupdated" class="form-label">DateUpdated:</label> 
                <InputDate id="dateupdated" @bind-Value="Booking.DateUpdated" class="form-control" /> 
                <ValidationMessage For="() => Booking.DateUpdated" class="text-danger" /> 
            </div>        
            <div class="mb-3" hidden>
                <label for="createdby" class="form-label">CreatedBy:</label> 
                <InputText id="createdby" @bind-Value="Booking.CreatedBy" class="form-control" /> 
                <ValidationMessage For="() => Booking.CreatedBy" class="text-danger" /> 
            </div>        
            <div class="mb-3" hidden>
                <label for="updatedby" class="form-label">UpdatedBy:</label> 
                <InputText id="updatedby" @bind-Value="Booking.UpdatedBy" class="form-control" /> 
                <ValidationMessage For="() => Booking.UpdatedBy" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/bookings">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Booking Booking { get; set; } = new Booking
        {
            DateOut = DateTime.Now,
            DateIn = DateTime.Now.AddDays(1)
        };


    private CarRentalManagementContext context = default!;
    private IList<Vehicle> Vehicles;
    private IList<Customer> Customers;
    private Dictionary<int, Make> MakesDict = new Dictionary<int, Make>();
    private Dictionary<int, Model> ModelsDict = new Dictionary<int, Model>();
    private Dictionary<int, Colour> ColoursDict = new Dictionary<int, Colour>();

    private string userId = "System";

    private bool isAdmin = false;
    @inject AuthenticationStateProvider authenticationStateProvider

    protected override async void OnInitialized()
    {
        // Retrieve authentication state and user information
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        // Get the userId claim
        var userIdClaim = user.FindFirst("userId");
        if (userIdClaim != null)
        {
            userId = userIdClaim.Value;
        }
        // Check if the user is authenticated and is an administrator
        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            isAdmin = user.IsInRole("Administrator");
        }
        context = DbFactory.CreateDbContext();
        //Load data from the database
        Vehicles = context.Vehicle.ToList();
        //Get all the customers created by the user or all customers if the user is an administrator
        Customers = context.Customer.Where(c => c.CreatedBy == userId).ToList();
        if (isAdmin)
        {
            Customers = context.Customer.ToList();
        }
        MakesDict = context.Make.ToDictionary(o => o.Id, o => o);
        ModelsDict = context.Model.ToDictionary(o => o.Id, o => o);
        ColoursDict = context.Colour.ToDictionary(o => o.Id, o => o);
    }
    private async Task AddBooking()
    {
        using var context = DbFactory.CreateDbContext();
        //Set the userId to the CreatedBy and UpdatedBy fields.
        Booking.CreatedBy = userId;
        Booking.UpdatedBy = userId;
        //Set the DateCreated and DateUpdated fields to the current date and time.
        Booking.DateCreated = DateTime.Now;
        Booking.DateUpdated = DateTime.Now;
        context.Booking.Add(Booking);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/bookings");
    }
}

   


}
